# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import sys


class Ui_MainWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.filename = ""
        self.get_cur_dir = os.getcwd()
        self.saved = False
        self.last_text = ""

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(722, 565)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.MainTextFrame = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.MainTextFrame.setObjectName("MainTextFrame")
        self.horizontalLayout.addWidget(self.MainTextFrame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 722, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuAbout.addAction(self.actionAbout)
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionClose)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionNew.triggered.connect(self.new_file)
        self.actionSave.triggered.connect(self.save)
        self.actionClose.triggered.connect(self.close_file)
        self.actionAbout.triggered.connect(self.about)
        self.actionOpen.triggered.connect(self.open)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Note 21"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionAbout.setText(_translate("MainWindow", "About"))


    # @QtCore.pyqtSlot()
    def new_file(self):
        if self.MainTextFrame.toPlainText():
            new = QtWidgets.QMessageBox()
            #.warning(self, 'Warning!', "Do you want to save your current data?", QMessageBox.Yes, QMessageBox.No, QMessageBox.Cancel)
            new.setWindowTitle("Save Data")
            new.setText("Do you want to save your current data?")
            new.setIcon(QtWidgets.QMessageBox.Warning)
            new.setStandardButtons(QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No|QtWidgets.QMessageBox.Cancel)
            new.buttonClicked.connect(self.new_dialog_button)
            new.exec_()

    def new_dialog_button(self, i):
        if i.text() == "&Yes":
            self.save()
        elif i.text() == "&No":
            self.MainTextFrame.clear()


    def save_dialog_button(self, i):
        if i.text() == "&Yes":
            self.save()


    def close_dialog_button(self, i):
        if i.text() == "&Yes":
            self.save()
        elif i.text() == "&No":
            sys.exit(app.exec_())


    def save_file(self):
        fname = QtWidgets.QMessageBox()
        fname.setWindowTitle("Save File")
        fname.setText("Do you want to save your data before closing?")
        fname.setIcon(QtWidgets.QMessageBox.Warning)
        fname.setStandardButtons(QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No|QtWidgets.QMessageBox.Cancel)
        fname.buttonClicked.connect(self.save_dialog_button)
        fname.exec_()
    

    def save(self):
        save, name = QtWidgets.QInputDialog.getText(self, "Save File", "Enter the name of the file: ")
        if save and name:
            self.filename = save
            with open(f"{self.filename}.txt", 'w') as f:
                f.write(self.MainTextFrame.toPlainText())
                self.saved = True
                self.last_text = self.MainTextFrame.toPlainText()


    def close_file(self):
        if self.last_text != self.MainTextFrame.toPlainText() and not self.saved:
            save = QtWidgets.QMessageBox()
            save.setWindowTitle("Save File")
            save.setText("Do you want to save your data before closing?")
            save.setIcon(QtWidgets.QMessageBox.Critical)
            save.setStandardButtons(QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No|QtWidgets.QMessageBox.Cancel)
            save.buttonClicked.connect(self.close_dialog_button)
            save.exec_()
        sys.exit(app.exec_())


    def about(self):
        about_menu = QtWidgets.QMessageBox()
        about_menu.setWindowTitle("About: Note 21")
        about_menu.setText("Note 21: A text editor coded in Python by Ishfaq Wardag.\nGitHub: Ish222")
        about_menu.setIcon(QtWidgets.QMessageBox.Information)
        about_menu.exec_()


    def open(self):
        file_name, name = QtWidgets.QInputDialog.getText(self, "Open File", "Enter the full path of the text file: ")
        print(file_name[-4:])
        print(os.path.exists(file_name))
        print(os.getcwd())
        if file_name and name and os.path.exists(file_name):
            if file_name[-4:] != ".txt":
                wrong_path = QtWidgets.QMessageBox()
                wrong_path.setWindowTitle("Incorrect Path")
                wrong_path.setText("Incorrect path (don't forget the .txt at the end of the path!)")
                wrong_path.setIcon(QtWidgets.QMessageBox.Critical)
                wrong_path.exec_()
            with open(file_name, 'r') as f:
                data = f.read()
                self.MainTextFrame.insertPlainText(data)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
